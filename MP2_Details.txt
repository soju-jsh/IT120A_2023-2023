:: Machine Problem #2
        + Nacasabog, Sabdani, Atienda
        + 11 - Upsilon
        + Group 4

        + Date Given:   December 01, 2022
        + Deadlines:
                Phase 1: December 07, 2022
                Phase 2: January 07, 2022
                Phase 3: January 11, 2022 [FINAL OUTPUT]


:: Main Task
        +   Extend MP1 into a “Programmer’s Calculator” where
                the user may input a number in any of the four
                number systems (binary, decimal, octal, hexadecimal)
                and the program outputs its equivalent in the
                remaining three systems.

:: Specification

        [/]     No new libraries and predefined functions.

        [/]     Limit variable types to int and char.

        [/]     Limit function return types to int and void.

        [/]     As per MP1, input should consist of a number 
                followed by a character indicating the base of the input. 
                Same case for the output.

        [/]     Must take the input, convert it to binary (if it
                isn’t already), then convert the binary form into
                the other systems.

        [/]     Must have separate functions for the following: 
                        : [dec -> bin]      : [bin -> dec]
                        : [oct -> bin]      : [bin -> oct]
                        : [hex -> bin]      : [bin -> hex]

        [/]     Must be able to accommodate a full 32-bit
                binary number (32 digits) and its equivalents.

        [/]     Must remove/not display leading zeros from
                binary output.

        [/]     Must allow for repeated use until the user
                decides to quit.

        [/]     Must reject invalid input.
                - Suffix is anything apart from d, b, o, or h.
                - Any of the digits are invalid for the system 
                  indicated (e.g., Z in hexadecimal, 2 in binary, etc.)
                - Exceeding the maximum input value.
                - Negative numbers.
                - Decimal points.
    
:: UPDATE LOG

        :: MP2v1 [11-bit Version] 
                Started: 12/01/22
                        [01]: 3hrs and 54mins
                        [02]: 3hrs and 05mins

                Duration: 6.8 - 7 Hours 

        :: MP2v2 [32-bit Version]
                Revision started: 12/03/22
                        [03]: around 9 hrs

                Duration: 9 Hours

        + 12/01/22      
                [PLAN: Finish Phase 1 and 2]     

                x Finished Phase 1 and 2
                x Functions added:      
                        int [dec -> bin]
                        int [oct -> bin] 
                        int [hex -> bin]

        + 12/02/22      
                [PLAN: Finish Phase 3]

                x Finished MP2
                        Problem: 11-bit limit, specs wanted 32-bit limit

                x Finished Phase 3
                x Functions added:      
                        int [bin -> dec]
                        int [bin -> oct]
                        void[bin -> hex]

        + 12/03/22      
                [PLAN: Revise Functions, prioritize "to binary" functions]

                x Finished MP2 [32-bit Version]
                        Problem: Leading zero once output is 1 digit away from limit

                x Changes
                        [Phase 2 Functions]
                        :: dBinary 
                                Before: Returns its binary equivalent in integer type [upto 11-bit]
                                After: Returns each char of its binary equivalent [upto 32-bit]
                                
                        :: oBinary
                                Before: Returns its binary equivalent in integer [upto 11-bit]
                                After: Returns each char of its binary equivalent [upto 32-bit]

                        :: hBinary 
                                Before: Returns its binary equivalent in integer [upto 11-bit]
                                After: Returns each char of its binary equivalent [upto 32-bit]
                        
                        [Phase 3 Functions]
                        :: bDecimal
                                Before: Parameter accepts binary in integer [upto 11-bit]
                                After: Parameter accepts binary in string [upto 32-bit]
                        
                        :: bOctal
                                Before: Parameter accepts binary in integer [upto 11-bit]
                                After: Parameter accepts binary in string [upto 32-bit]

                        :: bHexadecimal
                                Before: Parameter accepts binary in integer [upto 11-bit]
                                After: Parameter accepts binary in string [upto 32-bit]

        + 12/04/22
                [PLAN: Fix the leading zeros]
                        

